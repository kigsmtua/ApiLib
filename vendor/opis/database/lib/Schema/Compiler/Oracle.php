<?php
/* ===========================================================================
 * Opis Project
 * http://opis.io
 * ===========================================================================
 * Copyright 2013-2015 Marius Sarca
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================================ */

namespace Opis\Database\Schema\Compiler;

use Opis\Database\Schema\Compiler;
use Opis\Database\Schema\BaseColumn;
use Opis\Database\Schema\AlterTable;

class Oracle extends Compiler
{
    /** @var    string */
    protected $autoincrement = 'GENERATED BY DEFAULT ON NULL AS IDENTITY';

    /** @var    array */
    protected $modifiers = array('default', 'nullable', 'autoincrement');

    /**
     * @param   BaseColumn  $column
     *
     * @return  string
     */
    protected function handleTypeInteger(BaseColumn $column)
    {
        switch ($column->get('size', 'normal')) {
        case 'tiny':
            return 'NUMBER(3)';
        case 'small':
            return 'NUMBER(5)';
        case 'medium':
            return 'NUMBER(7)';
        case 'big':
            return 'NUMBER(19)';
        }

        return 'NUMBER(10)';
    }

    /**
     * @param   BaseColumn  $column
     * 
     * @return  string
     */
    protected function handleTypeDouble(BaseColumn $column)
    {
        return 'FLOAT(24)';
    }

    /**
     * @param   BaseColumn  $column
     *
     * @return  string
     */
    protected function handleTypeDecimal(BaseColumn $column)
    {
        if (null !== $l = $column->get('length')) {
            if (null === $p = $column->get('precision')) {
                return 'NUMBER(' . $this->value($l) . ')';
            }
            return 'NUMBER(' . $this->value($l) . ', ' . $this->value($p) . ')';
        }

        return 'NUMBER(10)';
    }

    /**
     * @param   BaseColumn  $column
     *
     * @return  string
     */
    protected function handleTypeBoolean(BaseColumn $column)
    {
        return 'NUMBER(1)';
    }

    /**
     * @param   BaseColumn  $column
     *
     * @return  string
     */
    protected function handleTypeText(BaseColumn $column)
    {
        switch ($column->get('size', 'normal')) {
        case 'tiny':
        case 'small':
            return 'VARCHAR2(2000)';
        case 'medium':
        case 'big':
            return 'CLOB';
        }

        return 'CLOB';
    }

    /**
     * @param   BaseColumn  $column
     * 
     * @return  string
     */
    protected function handleTypeString(BaseColumn $column)
    {
        return 'VARCHAR2(' . $this->value($column->get('length', 255)) . ')';
    }

    /**
     * @param   BaseColumn  $column
     * 
     * @return  string
     */
    protected function handleTypeTime(BaseColumn $column)
    {
        return 'DATE';
    }

    /**
     * @param   BaseColumn  $column
     * 
     * @return  string
     */
    protected function handleTypeDateTime(BaseColumn $column)
    {
        return 'DATE';
    }

    /**
     * @param   BaseColumn  $column
     *
     * @return  string
     */
    protected function handleTypeBinary(BaseColumn $column)
    {
        switch ($column->get('size', 'normal')) {
        case 'tiny':
        case 'small':
            return 'RAW(2000)';
        case 'medium':
        case 'large':
            return 'BLOB';
        }

        return 'BLOB';
    }

    /**
     * @param   AlterTable  $table
     * @param   mixed       $data
     *
     * @return  string
     */
    protected function handleModifyColumn(AlterTable $table, $data)
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' MODIFY ' . $this->handleColumns(array($data));
    }

    /**
     * @param   AlterTable  $table
     * @param   mixed       $data
     * 
     * @return  string
     */
    protected function handleAddColumn(AlterTable $table, $data)
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' ADD ' . $this->handleColumns(array($data));
    }

    /**
     * @param   AlterTable  $table
     * @param   mixed       $data
     *
     * @return  string
     */
    protected function handleSetDefaultValue(AlterTable $table, $data)
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' MODIFY '
            . $this->wrap($data) . ' DEFAULT ' . $this->value($data['value']);
    }


    /**
     * @param   AlterTable  $table
     * @param   mixed       $data
     *
     * @return  string
     */
    protected function handleDropDefaultValue(AlterTable $table, $data)
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' MODIFY '
            . $this->wrap($data) . ' DEFAULT NULL';
    }

    /**
     * @param   string $dsn
     *
     * @return  array
     */
    public function currentDatabase($dsn)
    {
        return array(
            'sql' => 'SELECT user FROM dual',
            'params' => array(),
        );
    }

    /**
     * @param   string  $databse
     *
     * @return  array
     */
    public function getTables($database)
    {
        $sql = 'SELECT ' . $this->wrap('table_name') . ' FROM ' . $this->wrap('all_tables')
            . ' WHERE owner = ? '
            . ' ORDER BY ' . $this->wrap('table_name') . ' ASC';

        return array(
            'sql' => $sql,
            'params' => array($database),
        );
    }

    /**
     * @param   string  $database
     * @param   string  $table
     *
     * @return  array
     */
    public function getColumns($database, $table)
    {
        $sql = 'SELECT ' . $this->wrap('column_name') . ' AS ' . $this->wrap('name')
            . ', ' . $this->wrap('data_type') . ' AS ' . $this->wrap('type')
            . ' FROM ' . $this->wrap('all_tab_columns')
            . ' WHERE LOWER(' . $this->wrap('owner') . ') = ? AND LOWER(' . $this->wrap('table_name') . ') = ? '
            . ' ORDER BY ' . $this->wrap('column_id') . ' ASC';

        return array(
            'sql' => $sql,
            'params' => array($database, $table),
        );
    }
}
